#include <stdio.h>
#include <string.h>
#include <stdint.h>

#include "lwip/sockets.h"
#include "netif/xadapter.h"
#include "lwipopts.h"
#include "xil_printf.h"
#include "FreeRTOS.h"
#include "task.h"
#include "ad4134/ad713x.h"
#include <math.h>
#include "ad4134/parameters.h"

#define THREAD_STACKSIZE 1024
#define MAX_CONNECTIONS 1
int new_sd[MAX_CONNECTIONS];

u16_t echo_port = 7;


extern uint32_t adc_buffer[];
extern uint32_t adc_buffer_len;

extern int fill_buffer(void);

void print_echo_app_header(void *arg)
{
    xil_printf("%20s %6d %s\r\n", "streaming server",
                        echo_port,
                        "$ nc <board_ip> 7");
}

void process_stream_request(void *p)
{
	int sd = *(int *)p;

	while (1) {
		if (fill_buffer() != 0) {
		    xil_printf("SPI/DMA error, aborting send\n");
		    break;
		}


		Xil_DCacheInvalidateRange((INTPTR)adc_buffer, SAMPLE_DATA);


		int sent = lwip_send(sd, adc_buffer, SAMPLE_DATA * sizeof(uint32_t), 0);
		if (sent <= 0) {
			xil_printf("Client disconnected or error. Closing socket.\n");
			break;
		}
		sys_check_timeouts();
		vTaskDelay(pdMS_TO_TICKS(0));
	}

	lwip_close(sd);
	vTaskDelete(NULL);
}

void echo_application_thread()
{
	int sock;
	int size;
	struct sockaddr_in address, remote;

	memset(&address, 0, sizeof(address));

	if ((sock = lwip_socket(AF_INET, SOCK_STREAM, 0)) < 0)
		return;

	address.sin_family = AF_INET;
	address.sin_port = htons(echo_port);
	address.sin_addr.s_addr = INADDR_ANY;

	if (lwip_bind(sock, (struct sockaddr *)&address, sizeof (address)) < 0)
		return;

	lwip_listen(sock, 1);
	size = sizeof(remote);

	xil_printf("Waiting for client to stream data...\n");

	while (1) {
		new_sd[0] = lwip_accept(sock, (struct sockaddr *)&remote, (socklen_t *)&size);
		if (new_sd[0] >= 0) {
			xil_printf("Client connected! Starting stream...\n");
			sys_thread_new("streambuf", process_stream_request,
				(void*)&(new_sd[0]),
				THREAD_STACKSIZE,
				DEFAULT_THREAD_PRIO);
		}
	}
}
